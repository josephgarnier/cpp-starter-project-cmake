# Copyright 2019-present, Joseph Garnier
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.
# =============================================================================
# What Is This?
# -------------
# See README file in the root directory of this source tree.


#------------------------------------------------------------------------------
# Customize with you own parameter values here (see below for the documentation).
#------------------------------------------------------------------------------

#---- Global options ----
set(PROJECT_NAME_VAL                  "project-name")
set(PROJECT_SUMMARY_VAL               "description")
set(PROJECT_VENDOR_NAME_VAL           "your-name")
set(PROJECT_VENDOR_CONTACT_VAL        "contact")
set(PROJECT_VERSION_MAJOR_VAL         "0")
set(PROJECT_VERSION_MINOR_VAL         "0")
set(PROJECT_VERSION_PATCH_VAL         "0")
if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Linux")
	set(LIFECYCLE_GENERATOR_VAL       "Unix Makefiles")
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
	set(LIFECYCLE_GENERATOR_VAL       "Visual Studio 16 2019")
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Darwin")
	set(LIFECYCLE_GENERATOR_VAL       "Unix Makefiles")
else()
	message(FATAL_ERROR "Unsupported host system: ${CMAKE_HOST_SYSTEM_NAME}")
endif()

#---- Base Generator Module options ----
set(BUILD_STANDARD_VERSION_VAL        "20")
set(BUILD_TYPE_VAL                    "debug")
set(MAIN_BINARY_TARGET_TYPE_VAL       "exec")
set(COMPILE_DEFINITIONS_VAL           "")
set(PUBLIC_HEADERS_SEPARATED_VAL      on)
set(USE_PRECOMPILED_HEADER_VAL        on)
if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Linux")
	set(COMPILE_TOOLCHAIN_FILE_VAL    "${CMAKE_SOURCE_DIR}/cmake/toolchains/Linux_gcc.cmake")
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
	set(COMPILE_TOOLCHAIN_FILE_VAL    "${CMAKE_SOURCE_DIR}/cmake/toolchains/Windows_msvc.cmake")
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Darwin")
	set(COMPILE_TOOLCHAIN_FILE_VAL    "${CMAKE_SOURCE_DIR}/cmake/toolchains/Linux_clang.cmake")
else()
	message(FATAL_ERROR "Unsupported host system: ${CMAKE_HOST_SYSTEM_NAME}")
endif()
set(GENERATE_COMPILE_COMMANDS_VAL     on)

#---- Test Generator Module options ----
set(ENABLE_TEST_MODULE_VAL            off)

#---- Code Analysis Generator Module options ----
set(ENABLE_CODE_ANALYSIS_MODULE_VAL   off)

#---- Doc Generator Module options ----
set(ENABLE_DOC_MODULE_VAL             off)

#---- Export Generator Module options ----
set(ENABLE_EXPORT_MODULE_VAL          off)
set(EXPORT_NAMESPACE_VAL              "MyProject")
if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Linux")
	set(INSTALL_DIRECTORY_VAL         "")
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
	set(INSTALL_DIRECTORY_VAL         "")
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Darwin")
	set(INSTALL_DIRECTORY_VAL         "")
else()
	message(FATAL_ERROR "Unsupported host system: ${CMAKE_HOST_SYSTEM_NAME}")
endif()

#---- Package Generator Module options ----
set(ENABLE_PACKAGE_MODULE_VAL         off)

#------------------------------------------------------------------------------
# End of customize section.
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# You don't need to edit this section.
#------------------------------------------------------------------------------

#---- Global options ----
set(PROJECT_NAME_DESC                  "Specifies a name for project")
set(PROJECT_SUMMARY_DESC               "Short description of the project")
set(PROJECT_VENDOR_NAME_DESC           "Project author")
set(PROJECT_VENDOR_CONTACT_DESC        "Author contact")
set(PROJECT_VERSION_MAJOR_DESC         "Project major version")
set(PROJECT_VERSION_MINOR_DESC         "Project minor version")
set(PROJECT_VERSION_PATCH_DESC         "Project patch version")
set(LIFECYCLE_GENERATOR_DESC           "Specifies for each platform with which generator the Build Lifecycle will be generated, see https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html")

#---- Base Generator Module options ----
set(BUILD_STANDARD_VERSION_DESC        "Specifies the standard version for building binaries, \"11\" or \"14\" or \"17\" or \"20\" or \"23\", see https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD.html")
set(BUILD_TYPE_DESC                    "Specifies the type of configuration for the build-tree, \"debug\" or \"release\", see https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html")
set(MAIN_BINARY_TARGET_TYPE_DESC       "Specifies the type of the main binary build target, \"static\" or \"shared\" or \"header\" (for header-only library) or as an \"exec\", see https://cmake.org/cmake/help/latest/prop_tgt/TYPE.html")
set(COMPILE_DEFINITIONS_DESC           "Specifies a semicolon-separated list of preprocessor definitions (e.g -DFOO;-DBAR or FOO;BAR). Can be empty.")
set(PUBLIC_HEADERS_SEPARATED_DESC      "Specifies whether public header files are separated from private header files.")
set(USE_PRECOMPILED_HEADER_DESC        "Specifies whether a precompiled header file will be used or not.")
set(COMPILE_TOOLCHAIN_FILE_DESC        "Specifies a path to a toolchain file, see https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html")
set(GENERATE_COMPILE_COMMANDS_DESC     "Specifies whether a compile_commands.json is generated or not .")

#---- Test Generator Module options ----
set(ENABLE_TEST_MODULE_DESC            "Specifies whether enable the Test Generator Module")

#---- Code Analysis Generator Module options ----
set(ENABLE_CODE_ANALYSIS_MODULE_DESC   "Specifies whether enable the Code Analysis Generator Module")

#---- Doc Generator Module options ----
set(ENABLE_DOC_MODULE_DESC             "Specifies whether enable the Doc Generator Module")

#---- Export Generator Module options ----
set(ENABLE_EXPORT_MODULE_DESC          "Specifies whether enable the Export Generator Module")
set(EXPORT_NAMESPACE_DESC              "Name to prepend to the target name when it is written to the import file, see https://cmake.org/cmake/help/latest/command/install.html#export")
set(INSTALL_DIRECTORY_DESC             "Directory used by install target, let empty to use the default value, see https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html")

#---- Package Generator Module options ----
set(ENABLE_PACKAGE_MODULE_DESC         "Specifies whether enable the Package Generator Module")


set(PARAM_PROJECT_NAME                  "${PROJECT_NAME_VAL}"                CACHE   STRING     "${PROJECT_NAME_DESC}"                  FORCE)
set(PARAM_PROJECT_SUMMARY               "${PROJECT_SUMMARY_VAL}"             CACHE   STRING     "${PROJECT_SUMMARY_DESC}"               FORCE)
set(PARAM_PROJECT_VENDOR_NAME           "${PROJECT_VENDOR_NAME_VAL}"         CACHE   STRING     "${PROJECT_VENDOR_NAME_DESC}"           FORCE)
set(PARAM_PROJECT_VENDOR_CONTACT        "${PROJECT_VENDOR_CONTACT_VAL}"      CACHE   STRING     "${PROJECT_VENDOR_CONTACT_DESC}"        FORCE)
set(PARAM_PROJECT_VERSION_MAJOR         "${PROJECT_VERSION_MAJOR_VAL}"       CACHE   STRING     "${PROJECT_VERSION_MAJOR_DESC}"         FORCE)
set(PARAM_PROJECT_VERSION_MINOR         "${PROJECT_VERSION_MINOR_VAL}"       CACHE   STRING     "${PROJECT_VERSION_MINOR_DESC}"         FORCE)
set(PARAM_PROJECT_VERSION_PATCH         "${PROJECT_VERSION_PATCH_VAL}"       CACHE   STRING     "${PROJECT_VERSION_PATCH_DESC}"         FORCE)
set(CMAKE_GENERATOR                     "${LIFECYCLE_GENERATOR_VAL}"         CACHE   STRING     "${LIFECYCLE_GENERATOR_DESC}"           FORCE)
set(PARAM_BUILD_STANDARD_VERSION        "${BUILD_STANDARD_VERSION_VAL}"      CACHE   STRING     "${BUILD_STANDARD_VERSION_DESC}"        FORCE)
set(PARAM_BUILD_TYPE                    "${BUILD_TYPE_VAL}"                  CACHE   STRING     "${BUILD_TYPE_DESC}"                    FORCE)
set(PARAM_MAIN_BINARY_TARGET_TYPE       "${MAIN_BINARY_TARGET_TYPE_VAL}"     CACHE   STRING     "${MAIN_BINARY_TARGET_TYPE_DESC}"       FORCE)
set(PARAM_COMPILE_DEFINITIONS           "${COMPILE_DEFINITIONS_VAL}"         CACHE   STRING     "${COMPILE_DEFINITIONS_DESC}"           FORCE)
set(PARAM_PUBLIC_HEADERS_SEPARATED      ${PUBLIC_HEADERS_SEPARATED_VAL}      CACHE   BOOL       "${PUBLIC_HEADERS_SEPARATED_DESC}"      FORCE)
set(PARAM_USE_PRECOMPILED_HEADER        ${USE_PRECOMPILED_HEADER_VAL}        CACHE   BOOL       "${USE_PRECOMPILED_HEADER_DESC}"        FORCE)
set(CMAKE_TOOLCHAIN_FILE                "${COMPILE_TOOLCHAIN_FILE_VAL}"      CACHE   FILEPATH   "${COMPILE_TOOLCHAIN_FILE_DESC}"        FORCE)
set(PARAM_GENERATE_COMPILE_COMMANDS     "${GENERATE_COMPILE_COMMANDS_VAL}"   CACHE   BOOL       "${GENERATE_COMPILE_COMMANDS_DESC}"     FORCE)
set(PARAM_ENABLE_TEST_MODULE            ${ENABLE_TEST_MODULE_VAL}            CACHE   BOOL       "${ENABLE_TEST_MODULE_DESC}"            FORCE)
set(PARAM_ENABLE_CODE_ANALYSIS_MODULE   ${ENABLE_CODE_ANALYSIS_MODULE_VAL}   CACHE   BOOL       "${ENABLE_CODE_ANALYSIS_MODULE_DESC}"   FORCE)
set(PARAM_ENABLE_DOC_MODULE             ${ENABLE_DOC_MODULE_VAL}             CACHE   BOOL       "${ENABLE_DOC_MODULE_DESC}"             FORCE)
set(PARAM_ENABLE_EXPORT_MODULE          ${ENABLE_EXPORT_MODULE_VAL}          CACHE   BOOL       "${ENABLE_EXPORT_MODULE_DESC}"          FORCE)
set(PARAM_EXPORT_NAMESPACE              "${EXPORT_NAMESPACE_VAL}"            CACHE   STRING     "${EXPORT_NAMESPACE_DESC}"              FORCE)
set(PARAM_INSTALL_DIRECTORY             "${INSTALL_DIRECTORY_VAL}"           CACHE   FILEPATH   "${INSTALL_DIRECTORY_DESC}"             FORCE)
set(PARAM_ENABLE_PACKAGE_MODULE         ${ENABLE_PACKAGE_MODULE_VAL}         CACHE   BOOL       "${ENABLE_PACKAGE_MODULE_DESC}"         FORCE)

#------------------------------------------------------------------------------
# You don't need to edit this previous section.
#------------------------------------------------------------------------------