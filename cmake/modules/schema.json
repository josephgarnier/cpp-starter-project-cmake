{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/schemas/cmake-targets.json",
  "description": "The CMake targets file specifies build targets, their configuration, and dependencies used by the project",
  "type": "object",
  "properties": {
    "$schema": {
      "description": "The schema against which to verify this document",
      "type": "string",
      "format": "uri-reference"
    },
    "$id": {
      "description": "A unique identifier for the schema resource",
      "type": "string",
      "format": "uri-reference"
    },
    "targets": {
      "description": "The list of build targets defined in the project",
      "type": "object",
      "patternProperties": {
        "^\\w+(/.+)?$": {
          "description": "The path to the directory where the target is defined. It must be unique and there cannot be more than one target per directory",
          "type": "object",
          "properties": {
            "name": {
              "description": "A unique name for the target",
              "type": "string",
              "minLength": 1
            },
            "type": {
              "description": "The type of binary to generate for this target: static library ('staticLib'), shared library ('sharedLib'), header-only ('interfaceLib'), or executable ('executable')",
              "type": "string",
              "enum": [
                "staticLib",
                "sharedLib",
                "interfaceLib",
                "executable"
              ]
            },
            "build": {
              "description": "Settings used to configure compilation and linking",
              "type": "object",
              "properties": {
                "compileFeatures": {
                  "description": "List of optional CMake compile features required by the target",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "compileDefinitions": {
                  "description": "List of optional preprocessor definitions applied when compiling this target",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "compileOptions": {
                  "description": "List of optional compiler options passed to this target",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "linkOptions": {
                  "description": "List of optional linker options passed to this target",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "compileFeatures",
                "compileDefinitions",
                "compileOptions",
                "linkOptions"
              ],
              "additionalProperties": false
            },
            "mainFile": {
              "description": "The main source file (.cpp) that serves as the entry point or primary compilation unit for this target. Must be a path to a file ending with .cpp, .cc, or .cxx",
              "type": "string",
              "pattern": "(.+/)?[^/]+\\.(cpp|cc|cxx)$"
            },
            "pchFile": {
              "description": "The header file used as precompiled header (PCH) for this target (optional). Must be a path to a file ending with .h, .hpp, .hxx, .inl or .tpp",
              "type": "string",
              "pattern": "(.+/)?[^/]+\\.(h|hpp|hxx|inl|tpp)$"
            },
            "headerPolicy": {
              "description": "Defines the policy applied to the header files",
              "type": "object",
              "properties": {
                "mode": {
                  "description": "Defines whether public headers are split ('split') or merged ('merged') with private headers",
                  "type": "string",
                  "enum": [
                    "split",
                    "merged"
                  ]
                },
                "includeDir": {
                  "description": "The path to the directory in '/include' from which public headers are collected (only required if mode is 'split')",
                  "type": "string",
                  "pattern": "^include(/.+)?$"
                }
              },
              "required": [
                "mode"
              ],
              "if": {
                "properties": {
                  "mode": {
                    "const": "split"
                  }
                }
              },
              "then": {
                "dependentRequired": {
                  "mode": [
                    "includeDir"
                  ]
                }
              },
              "additionalProperties": false
            },
            "dependencies": {
              "description": "The external packages or modules this target depends on",
              "type": "object",
              "patternProperties": {
                "^[^\\s]+$": {
                  "description": "The name of the dependency (also called 'PackageName' in CMake)",
                  "type": "object",
                  "properties": {
                    "rulesFile": {
                      "description": "The CMake file that defines how to integrate the dependency into the build system. It must be either 'generic', to use a predefined  rules file, or a path to a file ending with '.cmake'",
                      "oneOf": [
                        {
                          "const": "generic"
                        },
                        {
                          "type": "string",
                          "pattern": "(.+/)?[^/]+\\.cmake$"
                        }
                      ]
                    },
                    "packageLocation": {
                      "description": "Additional location to search for the dependency package (only required if rulesFile is 'generic')",
                      "type": "object",
                      "properties": {
                        "windows": {
                          "description": "Path to a directory containing the package for Windows. Must be absolute",
                          "type": "string",
                          "pattern": "^[A-Za-z]:[/](?:[^<>:\"/\\\\|?*]+[/]?)*$"
                        },
                        "unix": {
                          "description": "Path to a directory containing the package for Unix. Must be absolute, with no whitespace",
                          "type": "string",
                          "pattern": "^(/[^/\\s]+)+/?$"
                        },
                        "macos": {
                          "description": "Path to a directory containing the package for MacOS. Must be absolute, with no whitespace",
                          "type": "string",
                          "pattern": "^(/[^/\\s]+)+/?$"
                        }
                      },
                      "required": [],
                      "additionalProperties": false
                    },
                    "minVersion": {
                      "description": "The minimum acceptable version of the dependency (only required if rulesFile is 'generic')",
                      "type": "string"
                    },
                    "fetchInfo": {
                      "description": "The information required to download the dependency package (only required if rulesFile is 'generic')",
                      "type": "object",
                      "properties": {
                        "autodownload": {
                          "description": "Whether the dependency package can be automatically downloaded if not found locally",
                          "type": "boolean"
                        },
                        "kind": {
                          "description": "The download method to use (only required if autodownload is 'true')",
                          "type": "string",
                          "enum": [
                            "url",
                            "git",
                            "svn",
                            "mercurial"
                          ]
                        },
                        "repository": {
                          "description": "URL of the repository (only required if autodownload is 'true')",
                          "type": "string",
                          "format": "uri"
                        },
                        "tag": {
                          "description": "Branch name, tag or commit hash or id (only required if kind is 'git' or 'mercurial')",
                          "type": "string"
                        },
                        "hash": {
                          "description": "Hash of the file to be downloaded (only required if kind is 'url')",
                          "type": "string"
                        },
                        "revision": {
                          "description": "Revision to checkout from the repository (only required if kind is 'svn')",
                          "type": "string"
                        }
                      },
                      "required": [
                        "autodownload"
                      ],
                      "allOf": [
                        {
                          "if": {
                            "properties": {
                              "autodownload": {
                                "const": true
                              }
                            }
                          },
                          "then": {
                            "required": [
                              "kind",
                              "repository"
                            ],
                            "allOf": [
                              {
                                "if": {
                                  "properties": {
                                    "kind": {
                                      "enum": [
                                        "git",
                                        "mercurial"
                                      ]
                                    }
                                  }
                                },
                                "then": {
                                  "required": [
                                    "tag"
                                  ]
                                }
                              },
                              {
                                "if": {
                                  "properties": {
                                    "kind": {
                                      "const": "url"
                                    }
                                  }
                                },
                                "then": {
                                  "required": [
                                    "hash"
                                  ]
                                }
                              },
                              {
                                "if": {
                                  "properties": {
                                    "kind": {
                                      "const": "svn"
                                    }
                                  }
                                },
                                "then": {
                                  "required": [
                                    "revision"
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "additionalProperties": false
                    },
                    "optional": {
                      "description": "Indicates whether the dependency is optional (true) or required (false) (only required if rulesFile is 'generic')",
                      "type": "boolean"
                    },
                    "configuration": {
                      "description": "Additional dependency settings (only required if rulesFile is 'generic')",
                      "type": "object",
                      "properties": {
                        "compileFeatures": {
                          "description": "List of optional CMake compile features required by this dependency",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "compileDefinitions": {
                          "description": "List of optional preprocessor definitions applied when compiling this dependency",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "compileOptions": {
                          "description": "List of optional compiler options passed to this dependency",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "linkOptions": {
                          "description": "List of optional linker options passed to this dependency",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "rulesFile"
                  ],
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "rulesFile": {
                            "const": "generic"
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "packageLocation",
                          "minVersion",
                          "fetchInfo",
                          "optional",
                          "configuration"
                        ],
                        "properties": {
                          "configuration": {
                            "required": [
                              "compileFeatures",
                              "compileDefinitions",
                              "compileOptions",
                              "linkOptions"
                            ]
                          }
                        }
                      }
                    }
                  ],
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "required": [
            "name",
            "type",
            "build",
            "mainFile",
            "headerPolicy",
            "dependencies"
          ],
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "targets"
  ],
  "additionalProperties": false
}